{"version":3,"sources":["Template.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["html","idMapping","JSON","stringify","type","mediaInfos","title","caption","value","fields","normalizeField","tooltipField","originalIdMapping","parse","replace","varToReplace","valueToReplace","replacedHtml","hasOwnProperty","Object","keys","forEach","vtr","copyableHtmlText","template","require","React","createRef","defaultBoundaryPopupContent","colorChanged","evt","configChanged","hex","selectedColorChanged","target","id","current","setTimeout","App","Row","className","Col","sm","Form","ListGroup","Item","Group","as","controlId","Label","column","Control","placeholder","onChange","color","onChangeComplete","ref","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9a17bbc7.chunk.js","sourcesContent":["export let html = `<!DOCTYPE html>\r\n<meta charset=\"utf-8\">\r\n\r\n<!-- Load d3.js -->\r\n<script src=\"https://d3js.org/d3.v4.js\"></script>\r\n\r\n<!-- Load d3-cloud -->\r\n<script src=\"https://cdn.jsdelivr.net/gh/holtzy/D3-graph-gallery@master/LIB/d3.layout.cloud.js\"></script>\r\n\r\n<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css\">\r\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script>\r\n<script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js\"></script>\r\n\r\n<!-- Load arcgis js api -->\r\n<link\r\n  rel=\"stylesheet\"\r\n  href=\"https://js.arcgis.com/4.13/esri/themes/light/main.css\"\r\n/>\r\n<script src=\"https://js.arcgis.com/4.13/\"></script>\r\n\r\n<style>\r\n  html,\r\n  body,\r\n  #wordCloudContainer {\r\n    width: 100%;\r\n    height: 100%;\r\n    display: inline-block;\r\n    background-color: rgb(34, 34, 34);\r\n    overflow: hidden;\r\n  }\r\n\r\n  #wordCloudDiv {\r\n    height: 100%;\r\n    width: 30%;\r\n    float: left;\r\n  }\r\n\r\n  #wordCloudItem {\r\n    width: 100%;\r\n    height: calc(100% - 50px);\r\n  }\r\n\r\n  #wordCloudItem svg g g text:hover {\r\n    fill: rgb(3, 252, 252) !important\r\n  }\r\n  \r\n  #wordCloudMapDiv {\r\n    height: 100%;\r\n    width: 70%;\r\n    float: right;\r\n  }\r\n\r\n  @media only screen and (max-width: 1000px) {\r\n    #wordCloudContainer {\r\n      display: block;\r\n    }\r\n\r\n    #wordCloudDiv {\r\n      width: 100%;\r\n      float: none;\r\n      height: 250px;\r\n    }\r\n\r\n    #wordCloudItem {\r\n      width: 100%;\r\n      height: 200px;\r\n    }\r\n\r\n    #wordCloudMapDiv {\r\n      width: 100%;\r\n      height: calc(100% - 260px);\r\n      float: none;\r\n    }\r\n  }\r\n\r\n  @media only screen and (max-height: 750px) and (max-width: 1000px) {\r\n    #wordCloudDiv {\r\n      height: 150px;\r\n    }\r\n\r\n    #wordCloudItem {\r\n      height: 100px;\r\n    }\r\n\r\n    #wordCloudMapDiv {\r\n      height: calc(100% - 160px);\r\n    }\r\n  }\r\n\r\n  #wordCloudLabel {\r\n    width: calc(100% - 20px);\r\n    height: 40px;\r\n    margin: 10px;\r\n    font-family: \"Avenir Next\", \"Helvetica Neue\", sans-serif;\r\n    font-weight: bolder;\r\n    font-style: unset;\r\n    font-size: 20px;\r\n    color: white;\r\n    text-align: center;\r\n  }\r\n\r\n  .esri-editor .esri-item-list__scroller {\r\n    max-height: 350px;\r\n  }\r\n</style>\r\n\r\n<!-- Create a div where the graph will take place -->\r\n<div id=\"wordCloudContainer\">\r\n  <div id=\"wordCloudDiv\">\r\n    <div id=\"wordCloudLabel\">Click a word to filter the map and see more info!</div>\r\n    <div id=\"wordCloudItem\"></div>\r\n  </div>\r\n  <div id=\"wordCloudMapDiv\"></div>\r\n</div>\r\n\r\n<script>\r\n  require([\r\n    \"esri/WebMap\",\r\n    \"esri/views/MapView\",\r\n    \"esri/geometry/Multipoint\",\r\n    \"esri/core/watchUtils\",\r\n    \"esri/widgets/Home\",\r\n    \"esri/identity/OAuthInfo\",\r\n    \"esri/identity/IdentityManager\"\r\n  ], function (WebMap, MapView, Multipoint, EsriWatchUtils, Home, OAuthInfo, esriId) {\r\n    // TO BE REPLACED FOR CONFIGURATION\r\n    // -----------------------------------------------------------------\r\n    @@@REPLACEME@@@\r\n    // -----------------------------------------------------------------\r\n    // TO BE REPLACED FOR CONFIGURATION\r\n\r\n    if (appId) {\r\n      var oAuthInfo = new OAuthInfo({\r\n        appId: appId\r\n      });\r\n      esriId.registerOAuthInfos([oAuthInfo]);\r\n\r\n      esriId\r\n      .checkSignInStatus(oAuthInfo.portalUrl + \"/sharing\")\r\n      .then(() => {\r\n        console.log('Logged in!')\r\n      })\r\n      .catch(() => {\r\n        console.log('Need to Log in')\r\n      });\r\n    }\r\n\r\n    var maxHeight = 750;\r\n    var maxWidth = 1000;\r\n\r\n    var popupHasOpenedOnce = false;\r\n\r\n    var debouncing = false;\r\n    var allQuestionAnswers = [];\r\n    var lastQuestionAnswers = [];\r\n    var layout = null;\r\n    var surveyLayer = null;\r\n    var boundariesLayer = null;\r\n    var defaultPopupTemplate = null;\r\n\r\n    var currentAnswer = null;\r\n    var currentBoundaries = [];\r\n\r\n    var wordLocations = {};\r\n    var wordDupes = {};\r\n\r\n    var closingPopup = false;\r\n\r\n    var margin = {top: 10, right: 10, bottom: 10, left: 10}\r\n    width = ($(window).width()*(0.3)) - margin.left - margin.right,\r\n    height = ($(window).height()-50) - margin.top - margin.bottom;\r\n\r\n    var svg = null;\r\n    var waitingOnRefresh = false;\r\n\r\n    var originalSurveyLayerDefExpr = \"1=1\";\r\n    var originalBoundariesLayerDefExpr = \"1=1\";\r\n    \r\n    // Create a map from the referenced webmap item id\r\n    let webmap = new WebMap({\r\n      portalItem: {\r\n        id: webMapId\r\n      }\r\n    });\r\n\r\n    let view = new MapView({\r\n      container: \"wordCloudMapDiv\",\r\n      map: webmap,\r\n      popup: {\r\n        dockEnabled: true,\r\n        dockOptions: {\r\n          buttonEnabled: true,\r\n          breakpoint: false\r\n        }\r\n      }\r\n    });\r\n\r\n    view.when(() => {\r\n      const surveyLayer = getSurveyLayer()\r\n      const boundariesLayer = getBoundariesLayer()\r\n      originalSurveyLayerDefExpr = surveyLayer.definitionExpression\r\n      originalBoundariesLayerDefExpr = boundariesLayer.definitionExpression\r\n\r\n      let home = new Home({\r\n        view: view\r\n      })\r\n\r\n      view.ui.add(home, {\r\n        position: \"top-left\"\r\n      })\r\n\r\n      // reduceFeatures()\r\n      EsriWatchUtils.whenTrue(view, 'stationary', () => {\r\n        if (view.extent) {\r\n          extentChanged()\r\n        }\r\n      });\r\n\r\n      EsriWatchUtils.watch(view.popup, 'visible', popupVisibleChanged)\r\n      EsriWatchUtils.watch(view.popup, 'selectedFeature', popupFeatureChanged)\r\n      $(window).on('resize', resetWordCloud)\r\n\r\n      defaultPopupTemplate = getBoundariesLayer().popupTemplate\r\n      \r\n      setupSurveyLayerViewEvent()\r\n      filterBadWords()\r\n    })\r\n\r\nfunction setupWordCloud() {\r\n  if (!svg) {\r\n    if ($(window).width() <= maxWidth) {\r\n      width = $(window).width() - margin.left - margin.right\r\n\r\n      if ($(window).height() <= maxHeight) {\r\n        height = 100 - margin.top - margin.bottom\r\n      } else {\r\n        height = 200 - margin.top - margin.bottom\r\n      }\r\n    }\r\n\r\n    // append the svg object to the body of the page\r\n    svg = d3.select(\"#wordCloudItem\").append(\"svg\")\r\n      .attr(\"width\", width)\r\n      .attr(\"height\", height)\r\n    .append(\"g\")\r\n      .attr(\"transform\",\r\n            \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\n    extentChanged()\r\n  } else {\r\n    resetWordCloud()\r\n  }\r\n\r\n  waitingOnRefresh = false;\r\n}\r\n\r\nfunction setupSurveyLayerViewEvent() {\r\n  view.whenLayerView(getSurveyLayer()).then(function(layerView){\r\n    layerView.watch(\"updating\", function(value){\r\n      if (!value) {\r\n        console.log('am i waiting on refresh? ' + waitingOnRefresh)\r\n        if (waitingOnRefresh) setupWordCloud()\r\n        else filterBadWords()\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nfunction filterBadWords() {\r\n  surveyLayer = getSurveyLayer()\r\n  let newQuestionAnswers = false;\r\n\r\n  const surveyQuery = surveyLayer.createQuery();\r\n  surveyLayer.queryFeatures(surveyQuery).then((surveyResults) => {\r\n    let badQuestions = []\r\n    surveyResults.features.forEach(feature => {\r\n      const question = feature.attributes[surveyQuestionField]\r\n      if (!allQuestionAnswers.includes(question)) {\r\n        allQuestionAnswers.push(question)\r\n        newQuestionAnswers = true;\r\n      }\r\n      \r\n      if (fetchBadWords().includes(question.toLowerCase()) || fetchDummyWords().includes(question.toLowerCase())) {\r\n        badQuestions.push('\\\\'' + question + '\\\\'')\r\n      } else {\r\n        const description = feature.attributes[surveyDescriptionField]\r\n        if (description) {\r\n          const descriptionWords = description.split(/[\\\\s,]+/)\r\n          for (i = 0; i < descriptionWords.length; i++) {\r\n            const word = descriptionWords[i]\r\n            if (fetchBadWords().includes(word.toLowerCase())) {\r\n              badQuestions.push('\\\\'' + question + '\\\\'')\r\n              break\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n\r\n    if (newQuestionAnswers) {\r\n      if (badQuestions.length > 0) {\r\n        waitingOnRefresh = true\r\n        surveyLayer.definitionExpression = '(' + originalSurveyLayerDefExpr + ') AND (' + surveyQuestionField + ' NOT IN (' + badQuestions.join(',') + '))'\r\n      } else {\r\n        setupWordCloud()\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nfunction reduceFeatures() {\r\n  const surveyLayer = getSurveyLayer()\r\n  surveyLayer.featureReduction = {\r\n    type: \"cluster\",\r\n    clusterRadius: \"100px\",\r\n    popupTemplate: {\r\n      content: \"This cluster represents {cluster_count} answers.\"\r\n    },\r\n    clusterMinSize: \"24px\",\r\n    clusterMaxSize: \"60px\",\r\n    labelingInfo: [{\r\n      // turn off deconfliction to ensure all clusters are labeled\r\n      deconflictionStrategy: \"none\",\r\n      labelExpressionInfo: {\r\n        expression: \"Text($feature.cluster_count, '#,###')\"\r\n      },\r\n      symbol: {\r\n        type: \"text\",\r\n        color: \"#004a5d\",\r\n        font: {\r\n          weight: \"bold\",\r\n          family: \"Noto Sans\",\r\n          size: \"12px\"\r\n        }\r\n      },\r\n      labelPlacement: \"center-center\",\r\n    }]\r\n  }\r\n}\r\n\r\nfunction resetWordCloud(evt) {\r\n  if (evt) {\r\n    allQuestionAnswers = []\r\n    filterBadWords()\r\n  } else if (svg) {\r\n    svg = d3.select(\"#wordCloudItem\").select('svg').remove()\r\n\r\n    if ($(window).width() > maxWidth) {\r\n      width = ($(window).width()*(0.3)) - margin.left - margin.right\r\n      height = ($(window).height()-50) - margin.top - margin.bottom\r\n    } else {\r\n      width = $(window).width() - margin.left - margin.right\r\n\r\n      if ($(window).height() <= maxHeight) {\r\n        height = 100 - margin.top - margin.bottom\r\n      } else {\r\n        height = 200 - margin.top - margin.bottom\r\n      }\r\n    }\r\n\r\n    svg = d3.select(\"#wordCloudItem\").append(\"svg\")\r\n      .attr(\"width\", width)\r\n      .attr(\"height\", height)\r\n    .append(\"g\")\r\n      .attr(\"transform\",\r\n            \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\n    refreshWordCloud(lastQuestionAnswers)\r\n  }\r\n}\r\n\r\nfunction getSurveyLayer() {\r\n  if (!surveyLayer) {\r\n    view.map.layers.forEach(layer => {\r\n      if (layer.title === surveyLayerName) {\r\n        surveyLayer = layer;\r\n      }\r\n    });\r\n  }\r\n\r\n  return surveyLayer\r\n}\r\n\r\nfunction getBoundariesLayer() {\r\n  if (!boundariesLayer) {\r\n    view.map.layers.forEach(layer => {\r\n      if (layer.title === boundaryLayerName) {\r\n        boundariesLayer = layer;\r\n      }\r\n    });\r\n  }\r\n\r\n  return boundariesLayer\r\n}\r\n    \r\nfunction extentChanged(evt) {\r\n  if (!debouncing) {\r\n    debouncing = true;\r\n    setTimeout(() => {\r\n      debouncing = false;\r\n    }, 100);\r\n\r\n    const surveyLayer = getSurveyLayer()\r\n    const surveyQuery = surveyLayer.createQuery();\r\n    surveyQuery.geometry = view.extent;\r\n\r\n    surveyLayer.queryFeatures(surveyQuery).then((results) => {\r\n      const questionAnswers = results.features.map((feature) => {\r\n        const questionAnswer = feature.attributes[surveyQuestionField]\r\n        const lowerCaseQuestionAnswer = questionAnswer.toLowerCase()\r\n        if (wordDupes.hasOwnProperty(lowerCaseQuestionAnswer) && \r\n            !wordDupes[lowerCaseQuestionAnswer].includes(questionAnswer)) {\r\n          wordDupes[lowerCaseQuestionAnswer].push('\\\\'' + questionAnswer + '\\\\'')\r\n        } else {\r\n          wordDupes[lowerCaseQuestionAnswer] = ['\\\\'' + questionAnswer + '\\\\'']\r\n        }\r\n        \r\n        return lowerCaseQuestionAnswer;\r\n      });\r\n\r\n      const uniqueQuestionAnswers = [...new Set(questionAnswers)]\r\n\r\n      if (!arraysEqual(uniqueQuestionAnswers, lastQuestionAnswers)) {\r\n        refreshWordCloud(uniqueQuestionAnswers);\r\n      }\r\n    });\r\n  }\r\n}\r\n    \r\nfunction refreshWordCloud(questionAnswers) {\r\n  if (svg) {\r\n    const fontSize = ($(window).height() <= maxHeight && $(window).width() <= maxWidth) ? 20 : 30\r\n    layout = d3.layout.cloud()\r\n      .size([width, height])\r\n      .words(questionAnswers.map(function(d) { return {text: d}; }))\r\n      .padding(5)    \r\n      .rotate(0)    //space between words\r\n      .fontSize(fontSize)      // font size of words\r\n      .on(\"end\", draw);\r\n    layout.start(); \r\n    \r\n    lastQuestionAnswers = questionAnswers;\r\n  }\r\n}\r\n\r\nfunction clickedWord(evt) {\r\n  currentBoundaries = [];\r\n\r\n  closePopup()\r\n\r\n  if (currentAnswer && currentAnswer === evt.text) {\r\n    currentAnswer = null\r\n  } else {\r\n    currentAnswer = evt.text\r\n  }\r\n\r\n  refreshWordCloud(lastQuestionAnswers)\r\n  \r\n  const surveyLayer = getSurveyLayer()\r\n  const boundariesLayer = getBoundariesLayer()\r\n\r\n  boundariesLayer.definitionExpression = originalBoundariesLayerDefExpr\r\n\r\n  if (currentAnswer) {\r\n    const surveyQuery = surveyLayer.createQuery();\r\n    const boundariesQuery = boundariesLayer.createQuery();\r\n    surveyQuery.where = surveyQuestionField + ' IN (' + wordDupes[currentAnswer].join(',') + ')';\r\n\r\n    const multiPointResults = new Multipoint()\r\n    surveyLayer.queryFeatures(surveyQuery).then((results) => {\r\n      results.features.forEach((feature) => {\r\n        multiPointResults.addPoint(feature.geometry)\r\n      });\r\n\r\n      boundariesQuery.geometry = multiPointResults\r\n      boundariesLayer.queryFeatures(boundariesQuery).then((boundariesResults) => {\r\n        currentBoundaries = boundariesResults.features\r\n        filterBoundaries()\r\n        openCurrentBoundariesPopup()\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nfunction filterBoundaries() {\r\n  const boundariesLayer = getBoundariesLayer()\r\n  let defExpr = null\r\n  currentBoundaries.forEach((feature) => {\r\n    if (!defExpr) defExpr = ''\r\n    else defExpr += ' OR '\r\n    defExpr += (boundaryNameField + ' = \\\\'' + feature.attributes[boundaryNameField] + '\\\\'')\r\n  })\r\n  boundariesLayer.definitionExpression = '(' + originalBoundariesLayerDefExpr + ') AND (' + defExpr + ')'\r\n}\r\n\r\nfunction closePopup() {\r\n  if (view.popup.visible) {\r\n    closingPopup = true;\r\n    view.popup.close()\r\n  }\r\n}\r\n\r\nfunction openCurrentBoundariesPopup() {\r\n  view.popup.open({\r\n    features: currentBoundaries,\r\n    updateLocationEnabled: true\r\n  })\r\n}\r\n\r\nfunction popupVisibleChanged(visible) {\r\n  if (!closingPopup && popupHasOpenedOnce && !visible) {\r\n    clickedWord({text: currentAnswer})\r\n  } else {\r\n    closingPopup = false\r\n    popupHasOpenedOnce = true\r\n  }\r\n}\r\n\r\nfunction popupFeatureChanged(feature) {\r\n  const boundariesLayer = getBoundariesLayer()\r\n  if (feature && feature.layer && feature.layer === boundariesLayer) {\r\n    const surveyLayer = getSurveyLayer()\r\n    const surveyQuery = surveyLayer.createQuery();\r\n    surveyQuery.where = surveyQuestionField + ' IN (' + wordDupes[currentAnswer].join(',') + ')';\r\n    surveyQuery.geometry = feature.geometry\r\n\r\n    surveyLayer.queryFeatures(surveyQuery).then((results) => {\r\n      const questionDescriptions = results.features.map((feature) => {\r\n        return feature.attributes[surveyDescriptionField]\r\n      });\r\n\r\n      setBoundariesPopup(questionDescriptions, feature)\r\n    });\r\n  }\r\n}\r\n\r\nfunction setBoundariesPopup(questionDescriptions, boundary) {\r\n  const boundariesLayer = getBoundariesLayer()\r\n  if (currentAnswer) {\r\n    let htmlContent = '<ul class=\"list-group\" id=\"wordCloudModalBodyList\">'\r\n    questionDescriptions.forEach((questionDescription) => {\r\n      htmlContent += '<li class =\"list-group-item\">' + questionDescription + '</li>'\r\n    });\r\n    htmlContent += '</ul>'\r\n    const titleModifier = questionDescriptions.length > 0 ? 'feels' : 'does not feel'\r\n    boundariesLayer.popupTemplate = {\r\n      title: '{' + boundaryNameField + '} ' + titleModifier + ' ' + currentAnswer,\r\n      content: [\r\n        {\r\n          type: \"text\",\r\n          text: htmlContent\r\n        },\r\n        ...extraBoundaryPopupContent\r\n      ]\r\n    }\r\n  } else {\r\n    boundariesLayer.popupTemplate = defaultPopupTemplate\r\n  }\r\n}\r\n\r\n// This function takes the output of 'layout' above and draw the words\r\n// Wordcloud features that are THE SAME from one word to the other can be here\r\nfunction draw(words) {\r\n  resetPositions = false\r\n  for(i = 0; i < words.length; i++) {\r\n    if (!wordLocations.hasOwnProperty(words[i].text)) {\r\n      wordLocations = {}\r\n      break\r\n    }\r\n  }\r\n\r\n  const fontSize = ($(window).height() <= maxHeight && $(window).width() <= maxWidth) ? 20 : 30\r\n  svg\r\n    .select(\"g\")\r\n    .remove()\r\n  \r\n  svg\r\n    .append(\"g\")\r\n      .attr(\"transform\", \"translate(\" + layout.size()[0] / 2 + \",\" + layout.size()[1] / 2 + \")\")\r\n      .selectAll(\"text\")\r\n        .data(words)\r\n      .enter().append(\"text\")\r\n        .style(\"font-size\", fontSize)\r\n        .style(\"fill\", function (d) { if (d.text === currentAnswer) { return wordCloudSelectedColor } else { return wordCloudColor }})\r\n        .style(\"cursor\", \"pointer\")\r\n        .attr(\"text-anchor\", \"middle\")\r\n        .style(\"font-family\", wordCloudFontFamily)\r\n        .attr(\"transform\", function(d) {\r\n          if (!wordLocations.hasOwnProperty(d.text)) {\r\n            wordLocations[d.text] = [d.x, d.y]\r\n          }\r\n\r\n          return \"translate(\" + wordLocations[d.text] + \")rotate(\" + d.rotate + \")\";\r\n        })\r\n        .text(function(d) { return d.text; }).on(\"click\", clickedWord);\r\n}\r\n    \r\nfunction arraysEqual(arr1, arr2) {\r\n    if (!Array.isArray(arr1) || ! Array.isArray(arr2) || arr1.length !== arr2.length) {\r\n      return false;\r\n    }\r\n\r\n    const sortedArr1 = arr1.concat().sort();\r\n    const sortedArr2 = arr2.concat().sort();\r\n\r\n    for (let i = 0; i < sortedArr1.length; i++) {\r\n      if (sortedArr1[i] !== sortedArr2[i]) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nfunction fetchBadWords() {\r\n  return [\"4r5e\", \"5h1t\", \"5hit\", \"a55\", \"anal\", \"anus\", \"ar5e\", \"arrse\", \"arse\", \"ass\", \"ass-fucker\", \"asses\", \"assfucker\", \"assfukka\", \"asshole\", \"assholes\", \"asswhole\", \"a_s_s\", \"b!tch\", \"b00bs\", \"b17ch\", \"b1tch\", \"ballbag\", \"balls\", \"ballsack\", \"bastard\", \"beastial\", \"beastiality\", \"bellend\", \"bestial\", \"bestiality\", \"bi+ch\", \"biatch\", \"bitch\", \"bitcher\", \"bitchers\", \"bitches\", \"bitchin\", \"bitching\", \"bloody\", \"blow job\", \"blowjob\", \"blowjobs\", \"boiolas\", \"bollock\", \"bollok\", \"boner\", \"boob\", \"boobs\", \"booobs\", \"boooobs\", \"booooobs\", \"booooooobs\", \"breasts\", \"buceta\", \"bugger\", \"bum\", \"bunny fucker\", \"butt\", \"butthole\", \"buttmuch\", \"buttplug\", \"c0ck\", \"c0cksucker\", \"carpet muncher\", \"cawk\", \"chink\", \"cipa\", \"cl1t\", \"clit\", \"clitoris\", \"clits\", \"cnut\", \"cock\", \"cock-sucker\", \"cockface\", \"cockhead\", \"cockmunch\", \"cockmuncher\", \"cocks\", \"cocksuck\", \"cocksucked\", \"cocksucker\", \"cocksucking\", \"cocksucks\", \"cocksuka\", \"cocksukka\", \"cok\", \"cokmuncher\", \"coksucka\", \"coon\", \"cox\", \"crap\", \"cum\", \"cummer\", \"cumming\", \"cums\", \"cumshot\", \"cunilingus\", \"cunillingus\", \"cunnilingus\", \"cunt\", \"cuntlick\", \"cuntlicker\", \"cuntlicking\", \"cunts\", \"cyalis\", \"cyberfuc\", \"cyberfuck\", \"cyberfucked\", \"cyberfucker\", \"cyberfuckers\", \"cyberfucking\", \"d1ck\", \"damn\", \"dick\", \"dickhead\", \"dildo\", \"dildos\", \"dink\", \"dinks\", \"dirsa\", \"dlck\", \"dog-fucker\", \"doggin\", \"dogging\", \"donkeyribber\", \"doosh\", \"duche\", \"dyke\", \"ejaculate\", \"ejaculated\", \"ejaculates\", \"ejaculating\", \"ejaculatings\", \"ejaculation\", \"ejakulate\", \"f u c k\", \"f u c k e r\", \"f4nny\", \"fag\", \"fagging\", \"faggitt\", \"faggot\", \"faggs\", \"fagot\", \"fagots\", \"fags\", \"fanny\", \"fannyflaps\", \"fannyfucker\", \"fanyy\", \"fatass\", \"fcuk\", \"fcuker\", \"fcuking\", \"feck\", \"fecker\", \"felching\", \"fellate\", \"fellatio\", \"fingerfuck\", \"fingerfucked\", \"fingerfucker\", \"fingerfuckers\", \"fingerfucking\", \"fingerfucks\", \"fistfuck\", \"fistfucked\", \"fistfucker\", \"fistfuckers\", \"fistfucking\", \"fistfuckings\", \"fistfucks\", \"flange\", \"fook\", \"fooker\", \"fuck\", \"fucka\", \"fucked\", \"fucker\", \"fuckers\", \"fuckhead\", \"fuckheads\", \"fuckin\", \"fucking\", \"fuckings\", \"fuckingshitmotherfucker\", \"fuckme\", \"fucks\", \"fuckwhit\", \"fuckwit\", \"fudge packer\", \"fudgepacker\", \"fuk\", \"fuker\", \"fukker\", \"fukkin\", \"fuks\", \"fukwhit\", \"fukwit\", \"fux\", \"fux0r\", \"f_u_c_k\", \"gangbang\", \"gangbanged\", \"gangbangs\", \"gaylord\", \"gaysex\", \"goatse\", \"God\", \"god-dam\", \"god-damned\", \"goddamn\", \"goddamned\", \"hardcoresex\", \"hell\", \"heshe\", \"hoar\", \"hoare\", \"hoer\", \"homo\", \"hore\", \"horniest\", \"horny\", \"hotsex\", \"jack-off\", \"jackoff\", \"jap\", \"jerk-off\", \"jism\", \"jiz\", \"jizm\", \"jizz\", \"kawk\", \"knob\", \"knobead\", \"knobed\", \"knobend\", \"knobhead\", \"knobjocky\", \"knobjokey\", \"kock\", \"kondum\", \"kondums\", \"kum\", \"kummer\", \"kumming\", \"kums\", \"kunilingus\", \"l3i+ch\", \"l3itch\", \"labia\", \"lust\", \"lusting\", \"m0f0\", \"m0fo\", \"m45terbate\", \"ma5terb8\", \"ma5terbate\", \"masochist\", \"master-bate\", \"masterb8\", \"masterbat*\", \"masterbat3\", \"masterbate\", \"masterbation\", \"masterbations\", \"masturbate\", \"mo-fo\", \"mof0\", \"mofo\", \"mothafuck\", \"mothafucka\", \"mothafuckas\", \"mothafuckaz\", \"mothafucked\", \"mothafucker\", \"mothafuckers\", \"mothafuckin\", \"mothafucking\", \"mothafuckings\", \"mothafucks\", \"mother fucker\", \"motherfuck\", \"motherfucked\", \"motherfucker\", \"motherfuckers\", \"motherfuckin\", \"motherfucking\", \"motherfuckings\", \"motherfuckka\", \"motherfucks\", \"muff\", \"mutha\", \"muthafecker\", \"muthafuckker\", \"muther\", \"mutherfucker\", \"n1gga\", \"n1gger\", \"nazi\", \"nigg3r\", \"nigg4h\", \"nigga\", \"niggah\", \"niggas\", \"niggaz\", \"nigger\", \"niggers\", \"nob\", \"nob jokey\", \"nobhead\", \"nobjocky\", \"nobjokey\", \"numbnuts\", \"nutsack\", \"orgasim\", \"orgasims\", \"orgasm\", \"orgasms\", \"p0rn\", \"pawn\", \"pecker\", \"penis\", \"penisfucker\", \"phonesex\", \"phuck\", \"phuk\", \"phuked\", \"phuking\", \"phukked\", \"phukking\", \"phuks\", \"phuq\", \"pigfucker\", \"pimpis\", \"piss\", \"pissed\", \"pisser\", \"pissers\", \"pisses\", \"pissflaps\", \"pissin\", \"pissing\", \"pissoff\", \"poop\", \"porn\", \"porno\", \"pornography\", \"pornos\", \"prick\", \"pricks\", \"pron\", \"pube\", \"pusse\", \"pussi\", \"pussies\", \"pussy\", \"pussys\", \"rectum\", \"retard\", \"rimjaw\", \"rimming\", \"s hit\", \"s.o.b.\", \"sadist\", \"schlong\", \"screwing\", \"scroat\", \"scrote\", \"scrotum\", \"semen\", \"sex\", \"sh!+\", \"sh!t\", \"sh1t\", \"shag\", \"shagger\", \"shaggin\", \"shagging\", \"shemale\", \"shi+\", \"shit\", \"shitdick\", \"shite\", \"shited\", \"shitey\", \"shitfuck\", \"shitfull\", \"shithead\", \"shiting\", \"shitings\", \"shits\", \"shitted\", \"shitter\", \"shitters\", \"shitting\", \"shittings\", \"shitty\", \"skank\", \"slut\", \"sluts\", \"smegma\", \"smut\", \"snatch\", \"son-of-a-bitch\", \"spac\", \"spunk\", \"s_h_i_t\", \"t1tt1e5\", \"t1tties\", \"teets\", \"teez\", \"testical\", \"testicle\", \"tit\", \"titfuck\", \"tits\", \"titt\", \"tittie5\", \"tittiefucker\", \"titties\", \"tittyfuck\", \"tittywank\", \"titwank\", \"tosser\", \"turd\", \"tw4t\", \"twat\", \"twathead\", \"twatty\", \"twunt\", \"twunter\", \"v14gra\", \"v1gra\", \"vagina\", \"viagra\", \"vulva\", \"w00se\", \"wang\", \"wank\", \"wanker\", \"wanky\", \"whoar\", \"whore\", \"willies\", \"willy\", \"xrated\", \"xxx\"]\r\n}\r\n\r\nfunction fetchDummyWords() {\r\n  return [\"a\", \"the\", \"and\", \"of\"]\r\n}\r\n    \r\n});\r\n  \r\n</script>`\r\n\r\nvar idMapping = {\r\n  'webMapId': '\"820b892cf2b54283bcef1c1c9c635524\"',\r\n  'appId': 'null',\r\n  'surveyLayerName': '\"Race Relations Word Cloud Survey - 2\"',\r\n  'surveyQuestionField': '\"Question\"',\r\n  'surveyDescriptionField': '\"describe_why_you_chose_this_wor\"',\r\n  'boundaryLayerName': '\"USA States (Generalized)\"',\r\n  'boundaryNameField': '\"STATE_NAME\"',\r\n  'extraBoundaryPopupContent': JSON.stringify([{\r\n    type: \"media\",\r\n    mediaInfos: [\r\n      {\r\n        title: \"Race Distribution\",\r\n        type: \"pie-chart\",\r\n        caption: \"\",\r\n        value: {\r\n          fields: [\"WHITE\", \"BLACK\", \"AMERI_ES\", \"ASIAN\", \"HAWN_PI\", \"HISPANIC\", \"OTHER\", \"MULT_RACE\"],\r\n          normalizeField: null,\r\n          tooltipField: null\r\n        }\r\n      }\r\n    ]\r\n  }]),\r\n  'wordCloudColor': '\"#ebb134\"',\r\n  'wordCloudSelectedColor': '\"#eb5634\"',\r\n  'wordCloudFontFamily': '\"Futura\"'\r\n}\r\nvar originalIdMapping = JSON.parse(JSON.stringify(idMapping))\r\n\r\nexport function replace(varToReplace, valueToReplace) {\r\n  var replacedHtml = ''\r\n\r\n  if (varToReplace) {\r\n    if (valueToReplace && valueToReplace !== '\"\"' && valueToReplace !== '') {\r\n      idMapping[varToReplace] = valueToReplace\r\n    } else if (originalIdMapping.hasOwnProperty(varToReplace)) {\r\n      idMapping[varToReplace] = originalIdMapping[varToReplace]\r\n    }\r\n  }\r\n  \r\n  Object.keys(idMapping).forEach(vtr => {\r\n    replacedHtml += `var ${vtr} = ${idMapping[vtr]};`\r\n  })\r\n  \r\n  return html.replace('@@@REPLACEME@@@', replacedHtml)\r\n}","import React, { RefObject } from 'react';\nimport { SketchPicker } from 'react-color';\nimport Form from 'react-bootstrap/Form';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nvar template = require('./Template.js');\nvar copyableHtmlText: RefObject<HTMLTextAreaElement>\ncopyableHtmlText = React.createRef()\n\nvar defaultBoundaryPopupContent = JSON.stringify([{\n  type: \"media\",\n  mediaInfos: [\n    {\n      title: \"Race Distribution\",\n      type: \"pie-chart\",\n      caption: \"\",\n      value: {\n        fields: [\"WHITE\", \"BLACK\", \"AMERI_ES\", \"ASIAN\", \"HAWN_PI\", \"HISPANIC\", \"OTHER\", \"MULT_RACE\"],\n        normalizeField: null,\n        tooltipField: null\n      }\n    }\n  ]\n}])\n\nfunction App() {\n  configChanged(null)\n\n  return (\n    <Row className=\"App\">\n      <Col id=\"copyableHtmlConfigDiv\" sm=\"6\">\n        <Form>\n          <ListGroup>\n            <ListGroup.Item>\n              <h3>Item Id Configuration</h3>\n\n              <Form.Group as={Row} controlId=\"webMapId\">\n                <Form.Label column sm=\"4\">Web Map Id</Form.Label>\n                <Col sm=\"8\">\n                  <Form.Control \n                    type=\"text\" \n                    placeholder=\"820b892cf2b54283bcef1c1c9c635524\"\n                    onChange={ configChanged }\n                  />\n                </Col>\n              </Form.Group>\n\n              <Form.Group as={Row} controlId=\"appId\">\n                <Form.Label column sm=\"4\">App Id (if web map contains secured services)</Form.Label>\n                <Col sm=\"8\">\n                  <Form.Control \n                    type=\"text\"\n                    onChange={ configChanged }\n                  />\n                </Col>\n              </Form.Group>\n            </ListGroup.Item>\n\n            <ListGroup.Item>\n              <h3>Survey Layer Configuration</h3>\n\n              <Form.Group as={Row} controlId=\"surveyLayerName\">\n                <Form.Label column sm=\"4\">Survey Layer Name</Form.Label>\n                <Col sm=\"8\">\n                  <Form.Control \n                    type=\"text\"\n                    placeholder=\"Race Relations Word Cloud Survey - 2\"\n                    onChange={ configChanged }\n                  />\n                </Col>\n              </Form.Group>\n\n              <Form.Group as={Row} controlId=\"surveyQuestionField\">\n                <Form.Label column sm=\"4\">Survey Question Field</Form.Label>\n                <Col sm=\"8\">\n                  <Form.Control \n                    type=\"text\"\n                    placeholder=\"Question\"\n                    onChange={ configChanged }\n                  />\n                </Col>\n              </Form.Group>\n\n              <Form.Group as={Row} controlId=\"surveyDescriptionField\">\n                <Form.Label column sm=\"4\">Survey Description Field</Form.Label>\n                <Col sm=\"8\">\n                  <Form.Control \n                    type=\"text\"\n                    placeholder=\"describe_why_you_chose_this_wor\"\n                    onChange={ configChanged }\n                  />\n                </Col>\n              </Form.Group>\n            </ListGroup.Item>\n          \n            <ListGroup.Item>\n              <h3>Boundary Layer Configuration</h3>\n\n              <Form.Group as={Row} controlId=\"boundaryLayerName\">\n                <Form.Label column sm=\"4\">Boundary Layer Name</Form.Label>\n                <Col sm=\"8\">\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"USA States (Generalized)\"\n                    onChange={ configChanged }\n                  />\n                </Col>\n              </Form.Group>\n\n              <Form.Group as={Row} controlId=\"boundaryNameField\">\n                <Form.Label column sm=\"4\">Boundary Name Field</Form.Label>\n                <Col sm=\"8\">\n                  <Form.Control \n                    type=\"text\" \n                    placeholder=\"STATE_NAME\"\n                    onChange={ configChanged }\n                  />\n                </Col>\n              </Form.Group>\n            \n              <Form.Group as={Row} controlId=\"extraBoundaryPopupContent\">\n                <Form.Label column sm=\"4\">Extra Boundary Popup Content</Form.Label>\n                <Col sm=\"8\">\n                  <Form.Control\n                    as=\"textarea\"\n                    placeholder={defaultBoundaryPopupContent}\n                    onChange={ configChanged }\n                  />\n                </Col>\n              </Form.Group>\n            </ListGroup.Item>\n\n            <ListGroup.Item>\n              <h3>Word Cloud Configuration</h3>\n\n              <Form.Group as={Row} controlId=\"wordCloudColor\">\n                <Form.Label column sm=\"4\">Word Cloud Color</Form.Label>\n                <Col sm=\"8\">\n                  <SketchPicker\n                    color={ '#ebb134' }\n                    onChangeComplete={ colorChanged }\n                  />\n                </Col>\n              </Form.Group>\n\n              <Form.Group as={Row} controlId=\"wordCloudSelectedColor\">\n                <Form.Label column sm=\"4\">Word Cloud Selected Color</Form.Label>\n                <Col sm=\"8\">\n                  <SketchPicker\n                    color={ '#eb5634' }\n                    onChangeComplete={ selectedColorChanged }\n                  />\n                </Col>\n              </Form.Group>\n\n              <Form.Group as={Row} controlId=\"wordCloudFontFamily\">\n                <Form.Label column sm=\"4\">Word Cloud Font Family</Form.Label>\n                <Col sm=\"8\">\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Futura\"\n                    onChange={ configChanged }\n                  />\n                </Col>\n              </Form.Group>\n            </ListGroup.Item>\n          </ListGroup>\n        </Form>\n      </Col>\n\n      <Col id=\"copyableHtmlDiv\" sm=\"6\">\n        <Form.Group controlId=\"copyableHtml\">\n          <Form.Label column sm=\"4\">Copyable HTML</Form.Label>\n          <Col sm=\"12\">\n            <Form.Control\n              as=\"textarea\"\n              placeholder={template.html}\n              ref={copyableHtmlText}\n            />\n          </Col>\n        </Form.Group>\n        \n      </Col>\n    </Row>\n  );\n}\n\nfunction colorChanged(evt: any) {\n  configChanged({\n    'target': {\n      'id': 'wordCloudColor',\n      'value': evt.hex\n    }\n  })\n}\n\nfunction selectedColorChanged(evt: any) {\n  configChanged({\n    'target': {\n      'id': 'wordCloudSelectedColor',\n      'value': evt.hex\n    }\n  })\n}\n\nfunction configChanged(evt: any) {\n  if (!evt) {\n    setTimeout(() => {\n      copyableHtmlText.current!.value = template.replace()\n    }, 500)\n  } else {\n    if (evt.target.id === 'extraBoundaryPopupContent') {\n      copyableHtmlText.current!.value = template.replace(evt.target.id, evt.target.value)\n    } else {\n      copyableHtmlText.current!.value = template.replace(evt.target.id, `\"${evt.target.value}\"`)\n    }\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}